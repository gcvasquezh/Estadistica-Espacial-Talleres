resi_2= residuals(fit_2)
coef_2= coefs2poly(fit_2)
outliers_2 = locate.outliers(resi_2,coef_2,cval=3.5)###cval=3.5 por defecto
outliers_2
####Hay que repetir el análisis de residuales del modelo.
##### Pronóstico
#fit= Arima(serie2,order=c(1,0,0),include.mean = F)
fit2= Arima(serie2,order=c(1,0,0),include.mean = F,xreg=xreg)
pronostico=  forecast(object=fit,h=15)  #4.093698
regresoras=c(rep(1,15))
pronostico_out=forecast(object=fit2,xreg=regresoras,h=15)
#par(mfrow=c(1,2))
#plot(pronostico,ylim=c(-3,7))
plot(pronostico_out,ylim=c(-3,7)) ###Note la reducción en la varianza de las predicciones
plot(pronostico$residuals,ylim=c(-3,5))
plot(pronostico_out$residuals,ylim=c(-3,5))
library(lmtest)
data("AirPassengers")
plot(AirPassengers)
serie <- AirPassengers
ajuste=Arima(serie,order=c(0,1,1),seasonal = list(order = c(0, 1, 1)),include.mean=F,lambda =0 )
resi= residuals(ajuste)
plot(resi)
coef= coefs2poly(ajuste)
outliers= locate.outliers(resi,coef)
outliers
n=length(serie)
xreg = outliers.effects(outliers,n )
xreg
###El siguiente procedimiento busca que al ajustar, en el modelo con el efecto de los outliers, se busquen si hay mas outliers.
analisis=Arima(serie,order=c(0,1,1),seasonal = list(order = c(0, 1, 1)),include.mean=F,lambda =0 ,xreg=xreg)
analisis
coeftest(analisis)
resi_analisis= residuals(analisis)
coef_analisis= coefs2poly(analisis)
outliers_analisis= locate.outliers(resi_analisis,coef_analisis)
outliers_analisis
xreg_analisis = outliers.effects(outliers_analisis,n )
####Se pone "AO" en types porque en la localización de outliers únicamente encontró aditivos. Se incluye los efectos de los outliers, así que ahora encontró un outlier cambio de nivel en el tiempo 54.
total_outliers=cbind(xreg,xreg_analisis)
analisis_final=Arima(serie,order=c(0,1,1),seasonal = list(order = c(0, 1, 1)),include.mean=F,lambda =0 ,xreg=total_outliers)
analisis_final
coeftest(analisis_final)
resi_final= residuals(analisis_final)
coef_final= coefs2poly(analisis_final)
outliers_final= locate.outliers(resi_final,coef_final)
outliers_final
###No se encontraron mas outliers
###Verificar los supuestos del modelo.
###Creación de las variable de intervención
pasos_adel=12
num_outliers=dim(total_outliers)[2]
regresoras_aditivos=matrix(c(rep(0,pasos_adel*(num_outliers-1))),pasos_adel,num_outliers-1)
regresoras_LS=matrix(c(rep(1,pasos_adel)),pasos_adel,1)
regresoras=cbind(regresoras_aditivos,regresoras_LS)
colnames(regresoras)=colnames(total_outliers)
pronostico_out=forecast(object=analisis_final,xreg=regresoras,h=pasos_adel)
pronostico_out
plot(pronostico_out)
coeftest(analisis_final)
###Creación de las variable de intervención
pasos_adel=12
num_outliers=dim(total_outliers)[2]
regresoras_aditivos=matrix(c(rep(0,pasos_adel*(num_outliers-1))),pasos_adel,num_outliers-1)
regresoras_LS=matrix(c(rep(1,pasos_adel)),pasos_adel,1)
regresoras=cbind(regresoras_aditivos,regresoras_LS)
colnames(regresoras)=colnames(total_outliers)
regresoras
rm(list=ls(all=TRUE)) # Remueve de la consola todo
# CARGA LIBRERÍAS ####
lista_librerías <- c("xlsx","tools","gtools","stringr","readr","haven",
"dplyr","tidyr","tidyverse","WriteXLS","spatialEco",
"spdep","gstat","raster","sf","sp","readxl","pacman",
"sfheaders","foreign", "spatialreg","ggplot2")
no_installs <- lista_librerías[!lista_librerías %in% installed.packages()]
if(length(no_installs) > 0) {
cat("Los siguientes paquetes no están instalados :\n")
cat(no_installs, sep = "\n")
install.packages(no_installs)
} else {
cat("Todos los paquetes están instalados. \n")
}
sapply(lista_librerías, require, character = TRUE)
# CARGA BASES DE DATOS ####
directorio<-setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Base_bog <- st_read(paste0(directorio,"/mapa_Bog_localidades/mapa_Bog_localidades.shp"))
rm(list=ls(all=TRUE)) # Remueve de la consola todo
# CARGA LIBRERÍAS ####
lista_librerías <- c("xlsx","tools","gtools","stringr","readr","haven",
"dplyr","tidyr","tidyverse","WriteXLS","spatialEco",
"spdep","gstat","raster","sf","sp","readxl","pacman",
"sfheaders","foreign", "spatialreg","ggplot2")
no_installs <- lista_librerías[!lista_librerías %in% installed.packages()]
if(length(no_installs) > 0) {
cat("Los siguientes paquetes no están instalados :\n")
cat(no_installs, sep = "\n")
install.packages(no_installs)
} else {
cat("Todos los paquetes están instalados. \n")
}
sapply(lista_librerías, require, character = TRUE)
# CARGA BASES DE DATOS ####
directorio<-setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Base_bog <- st_read(paste0(directorio,"/mapa_Bog_localidades/mapa_Bog_localidades.shp"))
Base_col <- st_read(paste0(directorio,"/Mapa_Municipios_politico/MGN_ADM_MPIO_GRAFICO.shp"))
Base_datos <- read_delim(paste0(directorio,"/datos_parcial2.csv"), delim = ";", locale = locale(encoding = "Latin1"))
Base_datos$Población <- as.numeric(gsub("\\.", "", Base_datos$Población))
Base_col <- Base_col %>%
filter(mpio_cnmbr %in% c("CHÍA","LA CALERA","CHOACHÍ","UBAQUE","CHIPAQUE",
"UNE","GUTIÉRREZ","GUAMAL","CUBARRAL","URIBE",
"COLOMBIA","COTA","FUNZA","MOSQUERA","SOACHA",
"PASCA","ARBELÁEZ","SAN BERNARDO","CABRERA")) %>%
filter(dpto_cnmbr %in% c("CUNDINAMARCA","HUILA","META"))
Base_bog$LOCCODIGO<-as.numeric(Base_bog$LOCCODIGO)
Base_final <- Base_datos %>% left_join(Base_bog,by=c("Area"="LOCCODIGO"))
Base_final <- st_as_sf(Base_final, crs = 4326)
Base_final$Año <- as.factor(Base_final$Año)
# MODELO SAR ####
## Coordenadas y función ####
coordenadas_localidades <- coordinates(as((Base_final[Base_final$Año==2023,]), 'Spatial'))
nb_to_df <- function(nb, coords) {
x <- coords[, 1]
y <- coords[, 2]
n <- length(nb)
cardnb <- card(nb)
i <- rep(1:n, cardnb)
j <- unlist(nb)
if (length(cardnb) == 0) {
return(data.frame(x = numeric(0), xend = numeric(0), y = numeric(0), yend = numeric(0)))
}
return(data.frame(x = x[i], xend = x[j], y = y[i], yend = y[j]))
}
## CRITERIO DE QUEEN ####
queen <- poly2nb(as(Base_final, 'Spatial'), row.names = 1:nrow(Base_final), queen = T)
queen_lw <- nb2listw(queen, style="W", zero.policy=TRUE)
queen_bogota_df <- nb_to_df(queen, coordenadas_localidades)
box <- st_bbox(Base_final)
box
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final) +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Construye el modelo SAR ####
sar_model <- spautolm(Casos ~ Localidad + Año, data = Base_final, listw = queen_lw)
summary(sar_model)
## Agregando pesos tamaño población ####
nysarw_sar <- spautolm(Casos ~ Localidad + Año, data = Base_final,
listw = queen_lw, weights = Población)
summary(nysarw_sar)
## Residuales ####
residuales_sar <- residuals(nysarw_sar)
moran_test_residuales_sar <- moran.test(residuales_sar, queen_lw)
moran_test_residuales_sar
summary(moran_test_residuales_sar)
#MODELO CAR ####
## CRITERIO DE QUEEN ####
queen <- poly2nb(as(Base_final, 'Spatial'), row.names = 1:nrow(Base_final), queen = T)
queen_lw <- nb2listw(queen, style="B", zero.policy=TRUE)
queen_bogota_df <- nb_to_df(queen, coordenadas_localidades)
box <- st_bbox(Base_final)
box
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos") +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Construye el modelo CAR ####
car_model <- spautolm(Casos ~ Localidad + Año, data = Base_final,
family = "CAR", listw = queen_lw)
summary(car_model)
## Agregando pesos tamaño población ####
nysarw_car <- spautolm(Casos ~ Localidad + Año, data = Base_final,
family = "CAR", listw = queen_lw, weights = Población)
summary(nysarw_car)
## Residuales ####
residuales_car <- residuals(nysarw_car)
moran_test_residuales_car <- moran.test(residuales_car, queen_lw)
moran_test_residuales_car
summary(moran_test_residuales_car)
rm(list=ls(all=TRUE)) # Remueve de la consola todo
# CARGA LIBRERÍAS ####
lista_librerías <- c("xlsx","tools","gtools","stringr","readr","haven",
"dplyr","tidyr","tidyverse","WriteXLS","spatialEco",
"spdep","gstat","raster","sf","sp","readxl","pacman",
"sfheaders","foreign", "spatialreg","ggplot2")
no_installs <- lista_librerías[!lista_librerías %in% installed.packages()]
if(length(no_installs) > 0) {
cat("Los siguientes paquetes no están instalados :\n")
cat(no_installs, sep = "\n")
install.packages(no_installs)
} else {
cat("Todos los paquetes están instalados. \n")
}
sapply(lista_librerías, require, character = TRUE)
# CARGA BASES DE DATOS ####
directorio<-setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Base_bog <- st_read(paste0(directorio,"/mapa_Bog_localidades/mapa_Bog_localidades.shp"))
Base_col <- st_read(paste0(directorio,"/Mapa_Municipios_politico/MGN_ADM_MPIO_GRAFICO.shp"))
Base_datos <- read_delim(paste0(directorio,"/datos_parcial2.csv"), delim = ";", locale = locale(encoding = "Latin1"))
Base_datos$Población <- as.numeric(gsub("\\.", "", Base_datos$Población))
Base_col <- Base_col %>%
filter(mpio_cnmbr %in% c("CHÍA","LA CALERA","CHOACHÍ","UBAQUE","CHIPAQUE",
"UNE","GUTIÉRREZ","GUAMAL","CUBARRAL","URIBE",
"COLOMBIA","COTA","FUNZA","MOSQUERA","SOACHA",
"PASCA","ARBELÁEZ","SAN BERNARDO","CABRERA")) %>%
filter(dpto_cnmbr %in% c("CUNDINAMARCA","HUILA","META"))
Base_bog$LOCCODIGO<-as.numeric(Base_bog$LOCCODIGO)
Base_final <- Base_datos %>% left_join(Base_bog,by=c("Area"="LOCCODIGO"))
Base_final <- st_as_sf(Base_final, crs = 4326)
Base_final$Año <- as.factor(Base_final$Año)
# MODELO SAR ####
## Coordenadas y función ####
coordenadas_localidades <- coordinates(as((Base_final[Base_final$Año==2023,]), 'Spatial'))
nb_to_df <- function(nb, coords) {
x <- coords[, 1]
y <- coords[, 2]
n <- length(nb)
cardnb <- card(nb)
i <- rep(1:n, cardnb)
j <- unlist(nb)
if (length(cardnb) == 0) {
return(data.frame(x = numeric(0), xend = numeric(0), y = numeric(0), yend = numeric(0)))
}
return(data.frame(x = x[i], xend = x[j], y = y[i], yend = y[j]))
}
## CRITERIO DE QUEEN ####
queen <- poly2nb(as(Base_final, 'Spatial'), row.names = 1:nrow(Base_final), queen = T)
queen_lw <- nb2listw(queen, style="W", zero.policy=TRUE)
queen_bogota_df <- nb_to_df(queen, coordenadas_localidades)
box <- st_bbox(Base_final)
box
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos") +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Construye el modelo SAR ####
sar_model <- spautolm(Casos ~ Localidad + Año, data = Base_final, listw = queen_lw)
summary(sar_model)
## Agregando pesos tamaño población ####
nysarw_sar <- spautolm(Casos ~ Localidad + Año, data = Base_final,
listw = queen_lw, weights = Población)
summary(nysarw_sar)
## Residuales ####
residuales_sar <- residuals(nysarw_sar)
moran_test_residuales_sar <- moran.test(residuales_sar, queen_lw)
moran_test_residuales_sar
summary(moran_test_residuales_sar)
#MODELO CAR ####
## CRITERIO DE QUEEN ####
queen <- poly2nb(as(Base_final, 'Spatial'), row.names = 1:nrow(Base_final), queen = T)
queen_lw <- nb2listw(queen, style="B", zero.policy=TRUE)
queen_bogota_df <- nb_to_df(queen, coordenadas_localidades)
box <- st_bbox(Base_final)
box
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos") +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Construye el modelo CAR ####
car_model <- spautolm(Casos ~ Localidad + Año, data = Base_final,
family = "CAR", listw = queen_lw)
summary(car_model)
## Agregando pesos tamaño población ####
nysarw_car <- spautolm(Casos ~ Localidad + Año, data = Base_final,
family = "CAR", listw = queen_lw, weights = Población)
summary(nysarw_car)
## Residuales ####
residuales_car <- residuals(nysarw_car)
moran_test_residuales_car <- moran.test(residuales_car, queen_lw)
moran_test_residuales_car
summary(moran_test_residuales_car)
View(Base_final)
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos") +
geom_sf_text(data=mapdeptos,aes(label=Localidad),col="black",
fontface="bold",size=4,fun.geometry=function(x) sf::st_centroid(x)) +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos") +
geom_sf_text(data=Base_final,aes(label=Localidad),col="black",
fontface="bold",size=4,fun.geometry=function(x) sf::st_centroid(x)) +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos") +
geom_sf_text(data=Base_final,aes(label=Localidad),col="black",
fontface="bold",size=1,fun.geometry=function(x) sf::st_centroid(x)) +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos") +
geom_sf_text(data=Base_final,aes(label=Localidad),col="black",
fontface="bold",size=2,fun.geometry=function(x) sf::st_centroid(x)) +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos") +
geom_sf_text(data=Base_final,aes(label=Area),col="black",
fontface="bold",size=2,fun.geometry=function(x) sf::st_centroid(x)) +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos") +
geom_sf_text(data=Base_final,aes(label=Area),col="black",
fontface="bold",size=2,fun.geometry=function(x) sf::st_centroid(x),hjust = 1, vjust = 0.5) +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos") +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
geom_sf_text(data=Base_final,aes(label=Area),col="black",
fontface="bold",size=2,fun.geometry=function(x) sf::st_centroid(x),hjust = 1, vjust = 0.5) +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos") +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
geom_sf_text(data=Base_final,aes(label=Area),col="black",
fontface="bold",size=3,fun.geometry=function(x) sf::st_centroid(x),hjust = 1, vjust = 0.5) +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos") +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
geom_sf_text(data=Base_final,aes(label=Area),col="black",
fontface="bold",size=3,fun.geometry=function(x) sf::st_centroid(x)) +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos",
breaks = Base_final$Area,
labels = Base_final$Localidad) +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
geom_sf_text(data=Base_final,aes(label=Area),col="black",
fontface="bold",size=3,fun.geometry=function(x) sf::st_centroid(x)) +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
legend_labels <- Base_final %>%
distinct(Area, Localidad) %>%
arrange(Area) %>%
mutate(label = paste(ID, ": ", Localidad))
legend_labels <- Base_final %>%
distinct(Area, Localidad) %>%
arrange(Area) %>%
mutate(label = paste(ID, ": ", Localidad))
legend_labels
legend_labels <- Base_final %>%
distinct(Area, Localidad) %>%
arrange(Area) %>%
mutate(label = paste(Area, ": ", Localidad))
legend_labels
# Crear un vector con los IDs únicos y sus etiquetas
breaks_labels <- setNames(legend_labels$Area, legend_labels$label)
box <- st_bbox(Base_final)
box
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos",
breaks = legend_labels$ID,
labels = legend_labels$label) +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
geom_sf_text(data=Base_final,aes(label=Area),col="black",
fontface="bold",size=3,fun.geometry=function(x) sf::st_centroid(x)) +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
legend_labels$label
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos",
breaks = legend_labels$Area,
labels = legend_labels$label) +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
geom_sf_text(data=Base_final,aes(label=Area),col="black",
fontface="bold",size=3,fun.geometry=function(x) sf::st_centroid(x)) +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos",
#breaks = legend_labels$Area,
labels = legend_labels$label) +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
geom_sf_text(data=Base_final,aes(label=Area),col="black",
fontface="bold",size=3,fun.geometry=function(x) sf::st_centroid(x)) +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
breaks_labels
View(legend_labels)
legend_labels <- Base_final %>%
distinct(Area, Localidad) %>%
arrange(Area)
## Gráfico para vecinos Queen ####
ggplot() +
geom_sf(data=Base_col, fill="cyan") +
geom_sf(data = Base_final, aes(fill = Casos)) +
scale_fill_gradient(low = "pink", high = "purple", name = "Casos") +
geom_point(data = queen_bogota_df, aes(x = x, y = y), color = "blue") +
geom_segment(data = queen_bogota_df,
aes(x = x, xend = xend, y = y, yend = yend), color = "blue") +
geom_sf_text(data=Base_final,aes(label=Area),col="black",
fontface="bold",size=3,fun.geometry=function(x) sf::st_centroid(x)) +
coord_sf(xlim=c(box$xmin,box$xmax),ylim=c(box$ymin,box$ymax),expand=FALSE) +
labs(x = "", y = "", title = "Vecinos Queen") +
theme(panel.background=element_rect(fill = NA, color = NA))
