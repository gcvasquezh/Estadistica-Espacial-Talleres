for(i in 1:ncol(harmonics)){
plot(harmonics[,i], type = 'l', xlab = "Time", ylab = colnames(harmonics)[i])
}
par(mar = rep(4, 4), mfrow=c(1,1))
diff_tsibble<-tsibblePIB|>mutate(logdiff_PIB=difference(log(value)))|>select(logdiff_PIB)
###Explore diferentes valores de K
# Corregir el código
Modelo_serie_diff <- diff_tsibble %>%
fable::ARIMA(value ~ fourier(K = 2) + pdq(order = c(0, 0, 0)) + PDQ(order = c(0, 0, 0)))
library(tidyverse)
library(tsibble)
library(fable)
library(fabletools)
library(TSA)
###Variables Dummy y Armónicos
forecast::seasonaldummy(PIB3TS)
Armonicos=TSA::harmonic(PIB3TS, m = 1)
###Armónicos
forecast::fourier(PIB3TS,K=1)
tiempo=1
j=1
sin(2*pi*tiempo*j/4)
cos(2*pi*tiempo*j/4)
###Gráfica de los armónicos
harmonics = fourier(PIB3TS, K = 2)
harmonics
par(mar = c(1,4,1,1), mfrow = c(6,2))
for(i in 1:ncol(harmonics)){
plot(harmonics[,i], type = 'l', xlab = "Time", ylab = colnames(harmonics)[i])
}
par(mar = rep(4, 4), mfrow=c(1,1))
diff_tsibble<-tsibblePIB|>mutate(logdiff_PIB=difference(log(value)))|>select(logdiff_PIB)
###Explore diferentes valores de K
# Corregir el código
Modelo_serie_diff<-diff_tsibble|>model(
`Fourier1PIBdiff`=ARIMA(logdiff_PIB~fourier(K=2)+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
real_ajustado1<-diff_tsibble%>%left_join(fitted(Modelo_serie_diff,by=index))%>%select(-.model)
real_ajustado1 %>%
autoplot() +
geom_line(data=real_ajustado1,aes(y=logdiff_PIB,colour="real"))+
geom_line(data=real_ajustado1,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
#####Ajuste Dummy
Modelo_serie_diff_Dummy<-diff_tsibble|>model(
`DummyPIBdiff`=ARIMA(logdiff_pib~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
library(tidyverse)
library(tsibble)
library(fable)
library(fabletools)
library(TSA)
###Variables Dummy y Armónicos
forecast::seasonaldummy(PIB3TS)
Armonicos=TSA::harmonic(PIB3TS, m = 1)
###Armónicos
forecast::fourier(PIB3TS,K=1)
tiempo=1
j=1
sin(2*pi*tiempo*j/4)
cos(2*pi*tiempo*j/4)
###Gráfica de los armónicos
harmonics = fourier(PIB3TS, K = 2)
harmonics
par(mar = c(1,4,1,1), mfrow = c(6,2))
for(i in 1:ncol(harmonics)){
plot(harmonics[,i], type = 'l', xlab = "Time", ylab = colnames(harmonics)[i])
}
par(mar = rep(4, 4), mfrow=c(1,1))
diff_tsibble<-tsibblePIB|>mutate(logdiff_PIB=difference(log(value)))|>select(logdiff_PIB)
###Explore diferentes valores de K
# Corregir el código
Modelo_serie_diff<-diff_tsibble|>model(
`Fourier1PIBdiff`=ARIMA(logdiff_PIB~fourier(K=2)+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
real_ajustado1<-diff_tsibble%>%left_join(fitted(Modelo_serie_diff,by=index))%>%select(-.model)
real_ajustado1 %>%
autoplot() +
geom_line(data=real_ajustado1,aes(y=logdiff_PIB,colour="real"))+
geom_line(data=real_ajustado1,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
#####Ajuste Dummy
Modelo_serie_diff_Dummy<-diff_tsibble|>model(
`DummyPIBdiff`=ARIMA(logdiff_PIB~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
Modelo_serie_diff_Dummy<-diff_tsibble%>%left_join(fitted(Modelo_serie_diff,by=index))%>%select(-.model)
Modelo_serie_diff_Dummy %>%
autoplot() +
geom_line(data=Modelo_serie_diff_Dummy,aes(y=logdiff_pib,colour="real"))+
geom_line(data=Modelo_serie_diff_Dummy,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
Modelo_serie_diff_Dummy %>%
autoplot() +
geom_line(data=Modelo_serie_diff_Dummy,aes(y=logdiff_PIB,colour="real"))+
geom_line(data=Modelo_serie_diff_Dummy,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
library(tidyverse)
library(tsibble)
library(fable)
library(fabletools)
library(TSA)
###Variables Dummy y Armónicos
forecast::seasonaldummy(PIB3TS)
Armonicos=TSA::harmonic(PIB3TS, m = 1)
###Armónicos
forecast::fourier(PIB3TS,K=1)
tiempo=1
j=1
sin(2*pi*tiempo*j/4)
cos(2*pi*tiempo*j/4)
###Gráfica de los armónicos
harmonics = fourier(PIB3TS, K = 2)
harmonics
par(mar = c(1,4,1,1), mfrow = c(6,2))
for(i in 1:ncol(harmonics)){
plot(harmonics[,i], type = 'l', xlab = "Time", ylab = colnames(harmonics)[i])
}
par(mar = rep(4, 4), mfrow=c(1,1))
diff_tsibble<-tsibblePIB|>mutate(logdiff_PIB=difference(log(value)))|>select(logdiff_PIB)
###Explore diferentes valores de K
# Corregir el código
Modelo_serie_diff<-diff_tsibble|>model(
`Fourier1PIBdiff`=ARIMA(logdiff_PIB~fourier(K=2)+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
real_ajustado1<-diff_tsibble%>%left_join(fitted(Modelo_serie_diff,by=index))%>%select(-.model)
real_ajustado1 %>%
autoplot() +
geom_line(data=real_ajustado1,aes(y=logdiff_PIB,colour="real"))+
geom_line(data=real_ajustado1,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
#####Ajuste Dummy
Modelo_serie_diff_Dummy<-diff_tsibble|>model(
`DummyPIBdiff`=ARIMA(logdiff_PIB~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
Modelo_serie_diff_Dummy<-diff_tsibble%>%left_join(fitted(Modelo_serie_diff,by=index))%>%select(-.model)
Modelo_serie_diff_Dummy %>%
autoplot() +
geom_line(data=Modelo_serie_diff_Dummy,aes(y=logdiff_PIB,colour="real"))+
geom_line(data=Modelo_serie_diff_Dummy,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
#### Varios modelos la mismo tiempo
ajuste_final_models<-diff_tsibble%>%model(
`Fourier1pibdiff`=ARIMA(logdiff_pib~fourier(K=1)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`Fourier2pibdiff`=ARIMA(logdiff_pib~fourier(K=2)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`Fourier3pibdiff`=ARIMA(logdiff_pib~fourier(K=3)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`DummyPIBdiff`=ARIMA(logdiff_pib~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
library(tidyverse)
library(tsibble)
library(fable)
library(fabletools)
library(TSA)
###Variables Dummy y Armónicos
forecast::seasonaldummy(PIB3TS)
Armonicos=TSA::harmonic(PIB3TS, m = 1)
###Armónicos
forecast::fourier(PIB3TS,K=1)
tiempo=1
j=1
sin(2*pi*tiempo*j/4)
cos(2*pi*tiempo*j/4)
###Gráfica de los armónicos
harmonics = fourier(PIB3TS, K = 2)
harmonics
par(mar = c(1,4,1,1), mfrow = c(6,2))
for(i in 1:ncol(harmonics)){
plot(harmonics[,i], type = 'l', xlab = "Time", ylab = colnames(harmonics)[i])
}
par(mar = rep(4, 4), mfrow=c(1,1))
diff_tsibble<-tsibblePIB|>mutate(logdiff_PIB=difference(log(value)))|>select(logdiff_PIB)
###Explore diferentes valores de K
# Corregir el código
Modelo_serie_diff<-diff_tsibble|>model(
`Fourier1PIBdiff`=ARIMA(logdiff_PIB~fourier(K=2)+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
real_ajustado1<-diff_tsibble%>%left_join(fitted(Modelo_serie_diff,by=index))%>%select(-.model)
real_ajustado1 %>%
autoplot() +
geom_line(data=real_ajustado1,aes(y=logdiff_PIB,colour="real"))+
geom_line(data=real_ajustado1,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
#####Ajuste Dummy
Modelo_serie_diff_Dummy<-diff_tsibble|>model(
`DummyPIBdiff`=ARIMA(logdiff_PIB~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
Modelo_serie_diff_Dummy<-diff_tsibble%>%left_join(fitted(Modelo_serie_diff,by=index))%>%select(-.model)
Modelo_serie_diff_Dummy %>%
autoplot() +
geom_line(data=Modelo_serie_diff_Dummy,aes(y=logdiff_PIB,colour="real"))+
geom_line(data=Modelo_serie_diff_Dummy,aes(y=.fitted,colour="ajustado"))+
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustado" = "red"))
#### Varios modelos la mismo tiempo
ajuste_final_models<-diff_tsibble%>%model(
`Fourier1pibdiff`=ARIMA(logdiff_PIB~fourier(K=1)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`Fourier2pibdiff`=ARIMA(logdiff_PIB~fourier(K=2)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`Fourier3pibdiff`=ARIMA(logdiff_PIB~fourier(K=3)+pdq(0, 0, 0) + PDQ(0, 0, 0)),
`DummyPIBdiff`=ARIMA(logdiff_PIB~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
glance(ajuste_final_models)
ajuste_final_models %>%
select(Fourier1pibdiff)%>%coef()
Modelo_serie_diff_models<-diff_tsibble%>%left_join(fitted(ajuste_final_models)|>group_by(.model)%>%
pivot_wider(names_from = .model, values_from = .fitted))
Modelo_serie_diff_models %>%
autoplot() +
geom_line(data=Modelo_serie_diff_models,aes(y=logdiff_PIB,colour="real"))+
geom_line(data=Modelo_serie_diff_models,aes(y=Fourier1pibdiff,colour="ajustadoFourier1"))+
geom_line(data=Modelo_serie_diff_models,aes(y=Fourier2pibdiff,colour="ajustadoFourier2"))+
geom_line(data=Modelo_serie_diff_models,aes(y=Fourier3pibdiff,colour="ajustadoFourier3"))+
geom_line(data=Modelo_serie_diff_models,aes(y=DummyPIBdiff,colour="ajustadoDummy")) +
scale_color_manual(name = "real/ajustado", values = c("real" = "black", "ajustadoFourier1" = "red","ajustadoFourier2" = "blue","ajustadoFourier3"="green","ajustadoDummy"="yellow"))
STLextra<-PIB3TS-smooth_vec(PIB3TS,span = 0.1, degree = 2)
library(plotly)
library(forecast)
library(MASS)
library(tidyverse)
library(lubridate)
library(timetk)
library(tibble)
library(zoo)
library(tsibble)
library(feasts)
library(fable)
library(cowplot)
library(astsa)
library(TSstudio)
library(fabletools)
library(TSA)
library(readxl)
PIB3 <- read_excel("C:/Users/ander/OneDrive - Universidad Nacional de Colombia/Documentos/(2024-01) Octavo Semestre/Series de Tiempo Univariadas/Proyecto/1.4 PIB_Precios constantes grandes ramas de actividades economicas_trimestral_V2.xlsx", range = "AS18:AS93", col_names = FALSE)
PIB3TS <- ts(PIB3, start = c(2005, 1), end = c(2023, 4), frequency = 4)
#Convirtiendo los datos originales en objeto serie de tiempo(ts)
plot_ly( x = time(PIB3TS), y = PIB3TS, type = 'scatter', mode = 'lines',color=I("red")) %>%
layout(title = 'PIB Trimestral en Colombia',
xaxis = list(title = 'Trimestre', rangeslider = list(type = 'date')))
acf(PIB3TS,lag.max = length(PIB3TS))
Lambda<-BoxCox.lambda(PIB3TS, method ="loglik", lower = -3, upper = 3)#Encontrando el valor de Lambda
Lambda
MASS::boxcox(lm(PIB3TS ~ 1),seq(-3, 3, length = 50))9
MASS::boxcox(lm(PIB3TS ~ 1),seq(-3, 3, length = 50))9
MASS::boxcox(lm(PIB3TS ~ 1),seq(-3, 3, length = 50)))
MASS::boxcox(lm(PIB3TS ~ 1),seq(-3, 3, length = 50))
summary(fitLM <- lm(PIB3TS~time(PIB3TS), na.action=NULL))#Creando un modelo de regresión lineal
plot(PIB3TS, ylab="PIB trimestral en Colombia",xlab="Trimestre")
abline(fitLM,col = "red")
PIB3NoLM=PIB3TS-predict(fitLM)#Eliminando la tendencia
plot_ly( x = time(PIB3NoLM), y = PIB3NoLM, type = 'scatter', mode = 'lines',color=I("red")) %>%
layout(title = 'PIB trimestral en Colombia con tendencia lineal extraída',
xaxis = list(title = 'Trimestre', rangeslider = list(type = 'date')))
indice1=as.Date(as.yearmon(tk_index(PIB3TS)))#Convirtiendo en fecha el indice de DesempleoTSBox, deja como primero de enero cada fecha
indice1.1=yearmon(as.yearmon(tk_index(PIB3TS)))#Dejando esa fecha solo como año y mes
## Haciendo el objeto tsibble
df=data.frame(Fecha=indice1,PIB=as.matrix(PIB3TS))
colnames(df)[2]<-"PIB"
PIB3TSibble=as_tsibble(df)
PIB3TSibble
pib3TSibble <- tsibble(
periodo = seq(as.Date("2005-01-01"), as.Date("2023-12-01"), by = "3 months"),
valor = PIB3
)
####Primera aproximación del ajuste STL
df%>%timetk::plot_time_series(Fecha, PIB,
.interactive = TRUE,
.plotly_slider = TRUE)
#Creando una nueva columna con los datos ajustados por una regresión STL de grado 2 y utilizando el 20% de los datos, entre más pequeño, la curva es menos suave
###Ajuste STL moviendo los parámetros
df%>%mutate(PIBmod=smooth_vec(PIB,span = 0.1, degree = 2))%>%
ggplot(aes(Fecha, PIB)) +
geom_line() +
geom_line(aes(y = PIBmod), color = "red")
STLextra<-PIB3TS-smooth_vec(PIB3TS,span = 0.1, degree = 2)
plot_ly( x = time(STLextra), y = STLextra, type = 'scatter', mode = 'lines',color=I("red")) %>%
layout(title = 'PIB Trimestral con tendencia STL extraída',
xaxis = list(title = 'Trimestre', rangeslider = list(type = 'date')))
tsibblePIB<-as_tsibble(PIB3TS)#Creando el objeto tsibble del PIB
tsibblePIB
tsibblePIB %>%
model(
STL(value ~ trend() +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
DiferenciaOrd<-diff(PIB3TS)
plot_ly( x = time(DiferenciaOrd), y = DiferenciaOrd, type = 'scatter', mode = 'lines',color=I("red")) %>%
layout(title = 'PIB sin tendencia(Diferencia Ordinaria, lag=1)',
xaxis = list(title = 'Trimestre', rangeslider = list(type = 'date')))
DiferenciaOrd<-diff(PIB3TS)
plot_ly( x = time(DiferenciaOrd), y = DiferenciaOrd, type = 'scatter', mode = 'lines',color=I("red")) %>%
layout(title = 'PIB sin tendencia(Diferencia Ordinaria, lag=1)',
xaxis = list(title = 'Trimestre', rangeslider = list(type = 'date')))
library(geoR)
library(MASS)
library(gstat)
library(readxl)
#Punto 1##############
setwd("C:/Users/ander/OneDrive - Universidad Nacional de Colombia/Documentos/(2024-01) Octavo Semestre/Estadística Espacial/Estadistica-Espacial-Talleres")
superficie<-read_excel("Superficie.xlsx")
fondo<-read_excel("Fondo.xlsx")
summary(superficie)
cv<-apply(superficie,2,sd)/apply(superficie,2,mean);cv
summary(fondo)
cv<-apply(fondo,2,sd)/apply(fondo,2,mean);cv
#Punto 2##############
datos_fondo<-cbind(fondo[,1],fondo[,2],fondo[,3])
datos_fondo<-as.geodata(datos_fondo, coords=1:2, var=3)
plot(datos_fondo)
variograma=variog(datos_fondo)
plot(variograma)
variograma.env=variog.mc.env(datos_fondo, obj=variograma)
plot(variograma, env=variograma.env)
variofit(variograma, ini.cov.pars = )
# Fondo - Salinidad ####
vario_fsali<-variog(coords=Fondo[,c("X","Y")],data=Fondo$Sali,uvec=seq(0,1000,length=50),estimator.type="class")
plot(vario_fsali)
# Fondo - Salinidad ####
vario_fsali<-variog(coords=Fondo[,c("X","Y")],data=Fondo$Sali,uvec=seq(0,1000,length=50),estimator.type="class")
# Fondo - Salinidad ####
vario_fsali<-variog(coords=fondo[,c("X","Y")],data=Fondo$Sali,uvec=seq(0,1000,length=50),estimator.type="class")
# Fondo - Salinidad ####
vario_fsali<-variog(coords=fondo[,c("X","Y")],data=fondo$Sali,uvec=seq(0,1000,length=50),estimator.type="class")
plot(vario_fsali)
fsali_esferico<-variofit(vario_fsali,ini=c(sigmasq=varianza,phi=0),fix.nugget=FALSE,cov.model="spherical")
fsali_esferico<-variofit(vario_fsali,ini=c(sigmasq=var(fondo[,3]),phi=0),fix.nugget=FALSE,cov.model="spherical")
fsali_lineal<-variofit(vario_fsali,ini=c(sigmasq=var(fondo[,3]),phi=0),fix.nugget=FALSE,cov.model="linear")
fsali_exponencial<-variofit(vario_fsali,ini=c(sigmasq=var(fondo[,3]),phi=),fix.nugget=FALSE,cov.model="exponential")
fsali_exponencial<-variofit(vario_fsali,ini=c(sigmasq=var(fondo[,3]),phi=0),fix.nugget=FALSE,cov.model="exponential")
R2_fsali_esferico<-1-summary(fsali_esferico)$sum.of.squares/varianza_fsali
R2_fsali_esferico<-1-summary(fsali_esferico)$sum.of.squares/var(fondo[,3])
R2_fsali_lineal<-1-summary(fsali_lineal)$sum.of.squares/var(fondo[,3])
R2_fsali_exponencial<-1-summary(fsali_exponencial)$sum.of.squares/var(fondo[,3])
print(paste("R^2 del modelo esférico:", R2_fsali_esferico))
print(paste("R^2 del modelo lineal:", R2_fsali_lineal)) # Mejor de todos
print(paste("R^2 del modelo exponencial:", R2_fsali_exponencial))
View(fsali_esferico)
View(fsali_exponencial)
View(fsali_lineal)
fsali_pepita<-fsali_lineal$nugget;fsali_pepita
fsali_meseta<-fsali_lineal$nugget+summary(fsali_lineal)$estimated.pars[2];fsali_meseta
fsali_rango<-summary(fsali_lineal)$estimated.pars[3];fsali_rango
View(fondo)
# Fondo - Oxigeno ####
vario_foxi<-variog(coords=fondo[,c("X","Y")],data=fondo$oxig,uvec=seq(0,1000,length=50),estimator.type="class")
plot(vario_foxi)
foxi_esferico<-variofit(vario_foxi,ini=c(sigmasq=var(fondo[,4]),phi=0),fix.nugget=FALSE,cov.model="spherical")
foxi_lineal<-variofit(vario_foxi,ini=c(sigmasq=var(fondo[,4]),phi=0),fix.nugget=FALSE,cov.model="linear")
foxi_exponencial<-variofit(vario_foxi,ini=c(sigmasq=var(fondo[,4]),phi=0),fix.nugget=FALSE,cov.model="exponential")
R2_foxi_esferico<-1-summary(foxi_esferico)$sum.of.squares/var(fondo[,4])
R2_foxi_lineal<-1-summary(foxi_lineal)$sum.of.squares/var(fondo[,4])
R2_foxi_exponencial<-1-summary(foxi_exponencial)$sum.of.squares/var(fondo[,4])
print(paste("R^2 del modelo esférico:", R2_foxi_esferico))
print(paste("R^2 del modelo lineal:", R2_foxi_lineal)) # Mejor de todos
print(paste("R^2 del modelo exponencial:", R2_foxi_exponencial))
foxi_pepita<-foxi_lineal$nugget;foxi_pepita
foxi_meseta<-foxi_lineal$nugget+summary(foxi_lineal)$estimated.pars[2];foxi_meseta
foxi_rango<-summary(foxi_lineal)$estimated.pars[3];foxi_rango
View(fondo)
View(fondo)
View(fondo)
# Fondo - Temperatura ####
vario_ftemp<-variog(coords=fondo[,c("X","Y")],data=fondo$temp,uvec=seq(0,1000,length=50),estimator.type="class")
plot(vario_ftemp)
ftemp_esferico<-variofit(vario_ftemp,ini=c(sigmasq=var(fondo[,4]),phi=0),fix.nugget=FALSE,cov.model="spherical")
# Fondo - Temperatura ####
vario_ftemp<-variog(coords=fondo[,c("X","Y")],data=fondo$temp,uvec=seq(0,1000,length=50),estimator.type="class")
plot(vario_ftemp)
ftemp_esferico<-variofit(vario_ftemp,ini=c(sigmasq=var(fondo[,5]),phi=0),fix.nugget=FALSE,cov.model="spherical")
ftemp_lineal<-variofit(vario_ftemp,ini=c(sigmasq=var(fondo[,5]),phi=0),fix.nugget=FALSE,cov.model="linear")
ftemp_exponencial<-variofit(vario_ftemp,ini=c(sigmasq=var(fondo[,5]),phi=0),fix.nugget=FALSE,cov.model="exponential")
R2_ftemp_esferico<-1-summary(ftemp_esferico)$sum.of.squares/var(fondo[,5])
R2_ftemp_lineal<-1-summary(ftemp_lineal)$sum.of.squares/var(fondo[,5])
R2_ftemp_exponencial<-1-summary(ftemp_exponencial)$sum.of.squares/var(fondo[,5])
print(paste("R^2 del modelo esférico:", R2_ftemp_esferico))
print(paste("R^2 del modelo lineal:", R2_ftemp_lineal)) # Mejor de todos
print(paste("R^2 del modelo exponencial:", R2_ftemp_exponencial))
ftemp_pepita<-ftemp_lineal$nugget;ftemp_pepita
ftemp_meseta<-ftemp_lineal$nugget+summary(ftemp_lineal)$estimated.pars[2];ftemp_meseta
ftemp_rango<-summary(ftemp_lineal)$estimated.pars[3];ftemp_rango
# Fondo - PH ####
vario_fph<-variog(coords=fondo[,c("X","Y")],data=fondo$pH,uvec=seq(0,1000,length=50),estimator.type="class")
plot(vario_fph)
fph_esferico<-variofit(vario_fph,ini=c(sigmasq=var(fondo[,6]),phi=0),fix.nugget=FALSE,cov.model="spherical")
fph_lineal<-variofit(vario_fph,ini=c(sigmasq=var(fondo[,6]),phi=0),fix.nugget=FALSE,cov.model="linear")
fph_exponencial<-variofit(vario_fph,ini=c(sigmasq=var(fondo[,6]),phi=0),fix.nugget=FALSE,cov.model="exponential")
R2_fph_esferico<-1-summary(fph_esferico)$sum.of.squares/var(fondo[,6])
R2_fph_lineal<-1-summary(fph_lineal)$sum.of.squares/var(fondo[,6])
R2_fph_exponencial<-1-summary(fph_exponencial)$sum.of.squares/var(fondo[,6])
print(paste("R^2 del modelo esférico:", R2_fph_esferico))
print(paste("R^2 del modelo lineal:", R2_fph_lineal)) # Mejor de todos
print(paste("R^2 del modelo exponencial:", R2_fph_exponencial))
fph_pepita<-fph_lineal$nugget;fph_pepita
fph_meseta<-fph_lineal$nugget+summary(fph_lineal)$estimated.pars[2];fph_meseta
fph_rango<-summary(fph_lineal)$estimated.pars[3];fph_rango
var(fondo[,6])
summary(fph_esferico)
summary(fph_lineal)
summary(fph_exponencial)
# Fondo - PH ####
vario_fph<-variog(coords=fondo[,c("X","Y")],data=fondo$pH,uvec=seq(0,1000,length=50),estimator.type="class")
plot(vario_fph)
fph_esferico<-variofit(vario_fph,ini=c(sigmasq=var(fondo[,6]),phi=0),fix.nugget=FALSE,cov.model="spherical")
fph_lineal<-variofit(vario_fph,ini=c(sigmasq=var(fondo[,6]),phi=1),fix.nugget=FALSE,cov.model="linear")
fph_exponencial<-variofit(vario_fph,ini=c(sigmasq=var(fondo[,6]),phi=0),fix.nugget=FALSE,cov.model="exponential")
R2_fph_esferico<-1-summary(fph_esferico)$sum.of.squares/var(fondo[,6])
R2_fph_lineal<-1-summary(fph_lineal)$sum.of.squares/var(fondo[,6])
R2_fph_exponencial<-1-summary(fph_exponencial)$sum.of.squares/var(fondo[,6])
print(paste("R^2 del modelo esférico:", R2_fph_esferico))
print(paste("R^2 del modelo lineal:", R2_fph_lineal)) # Mejor de todos
print(paste("R^2 del modelo exponencial:", R2_fph_exponencial))
fph_pepita<-fph_lineal$nugget;fph_pepita
fph_meseta<-fph_lineal$nugget+summary(fph_lineal)$estimated.pars[2];fph_meseta
fph_rango<-summary(fph_lineal)$estimated.pars[3];fph_rango
summary(fph_esferico)$sum.of.square
summary(fph_lineal)$sum.of.square
summary(fph_exponencial)$sum.of.squares
summary(fph_esferico)
#Punto 1##############
setwd("C:/Users/ander/OneDrive - Universidad Nacional de Colombia/Documentos/(2024-01) Octavo Semestre/Estadística Espacial/Estadistica-Espacial-Talleres")
superficie<-read_excel("Superficie.xlsx")
fondo<-read_excel("Fondo.xlsx")
summary(superficie)
cv<-apply(superficie,2,sd)/apply(superficie,2,mean);cv
summary(fondo)
cv<-apply(fondo,2,sd)/apply(fondo,2,mean);cv
#Punto 2##############
datos_fondo<-cbind(fondo[,1],fondo[,2],fondo[,3])
datos_fondo<-as.geodata(datos_fondo, coords=1:2, var=3)
plot(datos_fondo)
variograma=variog(datos_fondo)
plot(variograma)
variograma.env=variog.mc.env(datos_fondo, obj=variograma)
plot(variograma, env=variograma.env)
?variofit
variofit(variograma, ini.cov.pars = )
# Fondo - Salinidad ####
vario_fsali<-variog(coords=fondo[,c("X","Y")],data=fondo$Sali,uvec=seq(0,1000,length=50),estimator.type="class")
plot(vario_fsali,title(main = "Variograma de Fondo - Salinidad"))
plot(vario_fsali)
title(main = "Variograma")
title(main = "Variograma de Fondo - Salinidad")
View(vario_fsali)
summary(fondo)
cv<-apply(fondo,2,sd)/apply(fondo,2,mean);cv
#Punto 2##############
datos_fondo<-cbind(fondo[,1],fondo[,2],fondo[,3])
datos_fondo<-as.geodata(datos_fondo, coords=1:2, var=3)
plot(datos_fondo)
variograma=variog(datos_fondo)
plot(variograma)
variograma.env=variog.mc.env(datos_fondo, obj=variograma)
plot(variograma, env=variograma.env)
variofit(variograma, ini.cov.pars = )
# Fondo - Salinidad ####
vario_fsali<-variog(coords=fondo[,c("X","Y")],data=fondo$Sali,uvec=seq(0,1000,length=50),estimator.type="class")
plot(vario_fsali)
fsali_esferico<-variofit(vario_fsali,ini=c(sigmasq=var(fondo[,3]),phi=0),fix.nugget=FALSE,cov.model="spherical")
fsali_lineal<-variofit(vario_fsali,ini=c(sigmasq=var(fondo[,3]),phi=0),fix.nugget=FALSE,cov.model="linear")
fsali_exponencial<-variofit(vario_fsali,ini=c(sigmasq=var(fondo[,3]),phi=0),fix.nugget=FALSE,cov.model="exponential")
R2_fsali_esferico<-1-summary(fsali_esferico)$sum.of.squares/var(fondo[,3])
R2_fsali_lineal<-1-summary(fsali_lineal)$sum.of.squares/var(fondo[,3])
R2_fsali_exponencial<-1-summary(fsali_exponencial)$sum.of.squares/var(fondo[,3])
print(paste("R^2 del modelo esférico:", R2_fsali_esferico))
print(paste("R^2 del modelo lineal:", R2_fsali_lineal)) # Mejor de todos
print(paste("R^2 del modelo exponencial:", R2_fsali_exponencial))
fsali_pepita<-fsali_lineal$nugget;fsali_pepita
fsali_meseta<-fsali_lineal$nugget+summary(fsali_lineal)$estimated.pars[2];fsali_meseta
fsali_rango<-summary(fsali_lineal)$estimated.pars[3];fsali_rango
# Fondo - Oxigeno ####
vario_foxi<-variog(coords=fondo[,c("X","Y")],data=fondo$oxig,uvec=seq(0,1000,length=50),estimator.type="class")
plot(vario_foxi)
foxi_esferico<-variofit(vario_foxi,ini=c(sigmasq=var(fondo[,4]),phi=0),fix.nugget=FALSE,cov.model="spherical")
foxi_lineal<-variofit(vario_foxi,ini=c(sigmasq=var(fondo[,4]),phi=0),fix.nugget=FALSE,cov.model="linear")
foxi_exponencial<-variofit(vario_foxi,ini=c(sigmasq=var(fondo[,4]),phi=0),fix.nugget=FALSE,cov.model="exponential")
R2_foxi_esferico<-1-summary(foxi_esferico)$sum.of.squares/var(fondo[,4])
R2_foxi_lineal<-1-summary(foxi_lineal)$sum.of.squares/var(fondo[,4])
R2_foxi_exponencial<-1-summary(foxi_exponencial)$sum.of.squares/var(fondo[,4])
print(paste("R^2 del modelo esférico:", R2_foxi_esferico))
print(paste("R^2 del modelo lineal:", R2_foxi_lineal)) # Mejor de todos
print(paste("R^2 del modelo exponencial:", R2_foxi_exponencial))
foxi_pepita<-foxi_lineal$nugget;foxi_pepita
foxi_meseta<-foxi_lineal$nugget+summary(foxi_lineal)$estimated.pars[2];foxi_meseta
foxi_rango<-summary(foxi_lineal)$estimated.pars[3];foxi_rango
# Fondo - Temperatura ####
vario_ftemp<-variog(coords=fondo[,c("X","Y")],data=fondo$temp,uvec=seq(0,1000,length=50),estimator.type="class")
plot(vario_ftemp)
ftemp_esferico<-variofit(vario_ftemp,ini=c(sigmasq=var(fondo[,5]),phi=0),fix.nugget=FALSE,cov.model="spherical")
ftemp_lineal<-variofit(vario_ftemp,ini=c(sigmasq=var(fondo[,5]),phi=0),fix.nugget=FALSE,cov.model="linear")
ftemp_exponencial<-variofit(vario_ftemp,ini=c(sigmasq=var(fondo[,5]),phi=0),fix.nugget=FALSE,cov.model="exponential")
R2_ftemp_esferico<-1-summary(ftemp_esferico)$sum.of.squares/var(fondo[,5])
R2_ftemp_lineal<-1-summary(ftemp_lineal)$sum.of.squares/var(fondo[,5])
R2_ftemp_exponencial<-1-summary(ftemp_exponencial)$sum.of.squares/var(fondo[,5])
print(paste("R^2 del modelo esférico:", R2_ftemp_esferico))
print(paste("R^2 del modelo lineal:", R2_ftemp_lineal)) # Mejor de todos
print(paste("R^2 del modelo exponencial:", R2_ftemp_exponencial))
ftemp_pepita<-ftemp_lineal$nugget;ftemp_pepita
ftemp_meseta<-ftemp_lineal$nugget+summary(ftemp_lineal)$estimated.pars[2];ftemp_meseta
ftemp_rango<-summary(ftemp_lineal)$estimated.pars[3];ftemp_rango
# Fondo - PH ####
vario_fph<-variog(coords=fondo[,c("X","Y")],data=fondo$pH,uvec=seq(0,1000,length=50),estimator.type="class")
plot(vario_fph)
fph_esferico<-variofit(vario_fph,ini=c(sigmasq=var(fondo[,6]),phi=0),fix.nugget=FALSE,cov.model="spherical")
fph_lineal<-variofit(vario_fph,ini=c(sigmasq=var(fondo[,6]),phi=0),fix.nugget=FALSE,cov.model="linear")
fph_exponencial<-variofit(vario_fph,ini=c(sigmasq=var(fondo[,6]),phi=0),fix.nugget=FALSE,cov.model="exponential")
R2_fph_esferico<-1-summary(fph_esferico)$sum.of.squares/var(fondo[,6])
R2_fph_lineal<-1-summary(fph_lineal)$sum.of.squares/var(fondo[,6])
R2_fph_exponencial<-1-summary(fph_exponencial)$sum.of.squares/var(fondo[,6])
print(paste("R^2 del modelo esférico:", R2_fph_esferico))
print(paste("R^2 del modelo lineal:", R2_fph_lineal)) # Mejor de todos
print(paste("R^2 del modelo exponencial:", R2_fph_exponencial))
fph_pepita<-fph_lineal$nugget;fph_pepita
fph_meseta<-fph_lineal$nugget+summary(fph_lineal)$estimated.pars[2];fph_meseta
fph_rango<-summary(fph_lineal)$estimated.pars[3];fph_rango
